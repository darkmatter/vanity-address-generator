name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use_cross: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Test binary
        if: matrix.os == 'macos-latest' || matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY="target/${{ matrix.target }}/release/vanity-eth.exe"
          else
            BINARY="target/${{ matrix.target }}/release/vanity-eth"
          fi

          # Test that binary runs
          $BINARY --help

          # Quick test (should fail immediately with invalid pattern)
          $BINARY "g" 2>&1 | grep -q "pattern must be a valid hex string" || true
